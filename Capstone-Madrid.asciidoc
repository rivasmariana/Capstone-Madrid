+*In[1]:*+
[source, ipython3]
----
import requests # library to handle requests
import pandas as pd # library for data analsysis
import numpy as np # library to handle data in a vectorized manner
import random # library for random number generation


!pip install geopy
from geopy.geocoders import Nominatim # module to convert an address into latitude and longitude values

# libraries for displaying images
from IPython.display import Image 
from IPython.core.display import HTML 
    
# tranforming json file into a pandas dataframe library
from pandas.io.json import json_normalize


! pip install folium==0.5.0
import folium # plotting library

print('Folium installed')
print('Libraries imported.')
----


+*Out[1]:*+
----
Requirement already satisfied: geopy in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (2.0.0)
Requirement already satisfied: geographiclib<2,>=1.49 in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (from geopy) (1.50)
Requirement already satisfied: folium==0.5.0 in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (0.5.0)
Requirement already satisfied: branca in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (from folium==0.5.0) (0.4.1)
Requirement already satisfied: jinja2 in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (from folium==0.5.0) (2.11.2)
Requirement already satisfied: requests in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (from folium==0.5.0) (2.24.0)
Requirement already satisfied: six in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (from folium==0.5.0) (1.15.0)
Requirement already satisfied: MarkupSafe>=0.23 in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (from jinja2->folium==0.5.0) (1.1.1)
Requirement already satisfied: idna<3,>=2.5 in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (from requests->folium==0.5.0) (2.10)
Requirement already satisfied: certifi>=2017.4.17 in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (from requests->folium==0.5.0) (2020.6.20)
Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (from requests->folium==0.5.0) (1.25.11)
Requirement already satisfied: chardet<4,>=3.0.2 in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (from requests->folium==0.5.0) (3.0.4)
Folium installed
Libraries imported.
----


+*In[2]:*+
[source, ipython3]
----
CLIENT_ID = 'HSX4WFEX3FIPQJISB155NKPB5CSIRIC4PL1RJWAJTW0FQFVU' # your Foursquare ID
CLIENT_SECRET = 'PQ4C2V4SUWPEA1M0FHP4L2NS3V2A4YH1B2K2SLPBDFXRLVBD' # your Foursquare Secret
VERSION = '20180604'
LIMIT = 30
print('Your credentails:')
print('CLIENT_ID: ' + CLIENT_ID)
print('CLIENT_SECRET:' + CLIENT_SECRET)
----


+*Out[2]:*+
----
Your credentails:
CLIENT_ID: HSX4WFEX3FIPQJISB155NKPB5CSIRIC4PL1RJWAJTW0FQFVU
CLIENT_SECRET:PQ4C2V4SUWPEA1M0FHP4L2NS3V2A4YH1B2K2SLPBDFXRLVBD
----


+*In[3]:*+
[source, ipython3]
----
address = 'Madrid,Spain'

geolocator = Nominatim(user_agent="foursquare_agent")
location = geolocator.geocode(address)
latitude = location.latitude
longitude = location.longitude
print(latitude, longitude)
----


+*Out[3]:*+
----
40.4167047 -3.7035825
----


+*In[4]:*+
[source, ipython3]
----
from geopy.geocoders import Nominatim 
----


+*In[18]:*+
[source, ipython3]
----
address = 'Madrid, Spain'

geolocator = Nominatim(user_agent="Madrid_agent")
location = geolocator.geocode(address)
latitude = location.latitude
longitude = location.longitude
print('The geograpical coordinates of Madrid are {}, {}.'.format(latitude, longitude))
----


+*Out[18]:*+
----
The geograpical coordinates of Madrid are 40.4167047, -3.7035825.
----


+*In[11]:*+
[source, ipython3]
----
search_query = 'Italian'
radius = 500
print(search_query + ' .... Great!')
----


+*Out[11]:*+
----
Italian .... Great!
----


+*In[21]:*+
[source, ipython3]
----
url = 'https://api.foursquare.com/v2/venues/search?client_id={}&client_secret={}&ll={},{}&v={}&query={}&radius={}&limit={}'.format(CLIENT_ID, CLIENT_SECRET, latitude, longitude, VERSION, search_query, radius, LIMIT)
url
----


+*Out[21]:*+
----'https://api.foursquare.com/v2/venues/search?client_id=HSX4WFEX3FIPQJISB155NKPB5CSIRIC4PL1RJWAJTW0FQFVU&client_secret=PQ4C2V4SUWPEA1M0FHP4L2NS3V2A4YH1B2K2SLPBDFXRLVBD&ll=40.4167047,-3.7035825&v=20180604&query=Italian&radius=500&limit=30'----


+*In[22]:*+
[source, ipython3]
----
results = requests.get(url).json()
results
----


+*Out[22]:*+
----{'meta': {'code': 200, 'requestId': '5fb2bd0969bc8506c4ef78a5'},
 'response': {'venues': [{'id': '4e5e767c14954da39ff06d12',
    'name': 'Molto Italiano',
    'location': {'lat': 40.415978,
     'lng': -3.705748,
     'labeledLatLngs': [{'label': 'display',
       'lat': 40.415978,
       'lng': -3.705748}],
     'distance': 200,
     'cc': 'ES',
     'country': 'España',
     'formattedAddress': ['España']},
    'categories': [{'id': '4bf58dd8d48988d1ca941735',
      'name': 'Pizza Place',
      'pluralName': 'Pizza Places',
      'shortName': 'Pizza',
      'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/food/pizza_',
       'suffix': '.png'},
      'primary': True}],
    'referralId': 'v-1605549321',
    'hasPerk': False},
   {'id': '4c080ac3a1b32d7f3c6595f0',
    'name': '4D Caffetteria Italiana',
    'location': {'address': 'C/ de Cuchilleros, 17',
     'lat': 40.41397173630024,
     'lng': -3.7080895998456374,
     'labeledLatLngs': [{'label': 'display',
       'lat': 40.41397173630024,
       'lng': -3.7080895998456374}],
     'distance': 488,
     'postalCode': '28005',
     'cc': 'ES',
     'city': 'Madrid',
     'state': 'Madrid',
     'country': 'España',
     'formattedAddress': ['C/ de Cuchilleros, 17',
      '28005 Madrid Madrid',
      'España']},
    'categories': [{'id': '4bf58dd8d48988d16d941735',
      'name': 'Café',
      'pluralName': 'Cafés',
      'shortName': 'Café',
      'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/food/cafe_',
       'suffix': '.png'},
      'primary': True}],
    'referralId': 'v-1605549321',
    'hasPerk': False},
   {'id': '5390ee01498e87f1a952ff0e',
    'name': 'Bellamia Gelateria Italiana',
    'location': {'address': 'C. Pérez Galdós, 3',
     'crossStreet': 'C. Fuencarral, 34',
     'lat': 40.42244828094222,
     'lng': -3.7004082726112983,
     'labeledLatLngs': [{'label': 'display',
       'lat': 40.42244828094222,
       'lng': -3.7004082726112983}],
     'distance': 693,
     'postalCode': '28004',
     'cc': 'ES',
     'city': 'Madrid Centro, Madrid',
     'state': 'Madrid',
     'country': 'España',
     'formattedAddress': ['C. Pérez Galdós, 3 (C. Fuencarral, 34)',
      '28004 Madrid Centro Madrid',
      'España']},
    'categories': [{'id': '4bf58dd8d48988d1c9941735',
      'name': 'Ice Cream Shop',
      'pluralName': 'Ice Cream Shops',
      'shortName': 'Ice Cream',
      'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/food/icecream_',
       'suffix': '.png'},
      'primary': True}],
    'referralId': 'v-1605549321',
    'hasPerk': False}]}}----


+*In[23]:*+
[source, ipython3]
----
venues = results['response']['venues']

# tranform venues into a dataframe
dataframe = json_normalize(venues)
dataframe.head()
----


+*Out[23]:*+
----
/home/jupyterlab/conda/envs/python/lib/python3.6/site-packages/ipykernel_launcher.py:4: FutureWarning: pandas.io.json.json_normalize is deprecated, use pandas.json_normalize instead
  after removing the cwd from sys.path.

[cols=",,,,,,,,,,,,,,,,,",options="header",]
|===
| |id |name |categories |referralId |hasPerk |location.lat |location.lng
|location.labeledLatLngs |location.distance |location.cc
|location.country |location.formattedAddress |location.address
|location.postalCode |location.city |location.state
|location.crossStreet
|0 |4e5e767c14954da39ff06d12 |Molto Italiano |[\{'id':
'4bf58dd8d48988d1ca941735', 'name': 'P... |v-1605549321 |False
|40.415978 |-3.705748 |[\{'label': 'display', 'lat': 40.415978,
'lng':... |200 |ES |España |[España] |NaN |NaN |NaN |NaN |NaN

|1 |4c080ac3a1b32d7f3c6595f0 |4D Caffetteria Italiana |[\{'id':
'4bf58dd8d48988d16d941735', 'name': 'C... |v-1605549321 |False
|40.413972 |-3.708090 |[\{'label': 'display', 'lat':
40.41397173630024... |488 |ES |España |[C/ de Cuchilleros, 17, 28005
Madrid Madrid, E... |C/ de Cuchilleros, 17 |28005 |Madrid |Madrid |NaN

|2 |5390ee01498e87f1a952ff0e |Bellamia Gelateria Italiana |[\{'id':
'4bf58dd8d48988d1c9941735', 'name': 'I... |v-1605549321 |False
|40.422448 |-3.700408 |[\{'label': 'display', 'lat':
40.42244828094222... |693 |ES |España |[C. Pérez Galdós, 3 (C.
Fuencarral, 34), 28004... |C. Pérez Galdós, 3 |28004 |Madrid Centro,
Madrid |Madrid |C. Fuencarral, 34
|===
----


+*In[24]:*+
[source, ipython3]
----
filtered_columns = ['name', 'categories'] + [col for col in dataframe.columns if col.startswith('location.')] + ['id']
dataframe_filtered = dataframe.loc[:, filtered_columns]

# function that extracts the category of the venue
def get_category_type(row):
    try:
        categories_list = row['categories']
    except:
        categories_list = row['venue.categories']
        
    if len(categories_list) == 0:
        return None
    else:
        return categories_list[0]['name']

# filter the category for each row
dataframe_filtered['categories'] = dataframe_filtered.apply(get_category_type, axis=1)

# clean column names by keeping only last term
dataframe_filtered.columns = [column.split('.')[-1] for column in dataframe_filtered.columns]

dataframe_filtered
----


+*Out[24]:*+
----
[cols=",,,,,,,,,,,,,,,",options="header",]
|===
| |name |categories |lat |lng |labeledLatLngs |distance |cc |country
|formattedAddress |address |postalCode |city |state |crossStreet |id
|0 |Molto Italiano |Pizza Place |40.415978 |-3.705748 |[\{'label':
'display', 'lat': 40.415978, 'lng':... |200 |ES |España |[España] |NaN
|NaN |NaN |NaN |NaN |4e5e767c14954da39ff06d12

|1 |4D Caffetteria Italiana |Café |40.413972 |-3.708090 |[\{'label':
'display', 'lat': 40.41397173630024... |488 |ES |España |[C/ de
Cuchilleros, 17, 28005 Madrid Madrid, E... |C/ de Cuchilleros, 17 |28005
|Madrid |Madrid |NaN |4c080ac3a1b32d7f3c6595f0

|2 |Bellamia Gelateria Italiana |Ice Cream Shop |40.422448 |-3.700408
|[\{'label': 'display', 'lat': 40.42244828094222... |693 |ES |España
|[C. Pérez Galdós, 3 (C. Fuencarral, 34), 28004... |C. Pérez Galdós, 3
|28004 |Madrid Centro, Madrid |Madrid |C. Fuencarral, 34
|5390ee01498e87f1a952ff0e
|===
----


+*In[25]:*+
[source, ipython3]
----
dataframe_filtered.name
----


+*Out[25]:*+
----0                 Molto Italiano
1        4D Caffetteria Italiana
2    Bellamia Gelateria Italiana
Name: name, dtype: object----


+*In[26]:*+
[source, ipython3]
----
venues_map = folium.Map(location=[latitude, longitude], zoom_start=13) # generate map centred around the Conrad Hotel


folium.CircleMarker(
    [latitude, longitude],
    radius=10,
    color='red',
    popup='Madrid,Spain',
    fill = True,
    fill_color = 'red',
    fill_opacity = 0.6
).add_to(venues_map)

# add the Italian restaurants as blue circle markers
for lat, lng, label in zip(dataframe_filtered.lat, dataframe_filtered.lng, dataframe_filtered.categories):
    folium.CircleMarker(
        [lat, lng],
        radius=5,
        color='blue',
        popup=label,
        fill = True,
        fill_color='blue',
        fill_opacity=0.6
    ).add_to(venues_map)

# display map
venues_map
----


+*Out[26]:*+
----
Make this Notebook Trusted to load map: File -> Trust Notebook
----


+*In[ ]:*+
[source, ipython3]
----

----
